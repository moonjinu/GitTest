	동기 방식의 데이터 처리
	  => 데이터를 전달 / 처리하기 위해서 페이지 이동o (화면 전환o)
	  => 서버에 요청(신호)을 보내고 응답을 받아야지만 실행가능
	  
	사용자 -> 페이지 요청(request) -> 서버
	사용자 <- 페이지 응답(response) <- 서버

	비동기 방식의 데이터 처리
	  => 데이터 전달 / 처리하기 위해서 페이지 이동o (화면 전환x)
	  => 서버에 요청(신호)을 보내고 응답결과와 상관없이 실행가능
	  
	사용자 -> 페이지 요청(request) / 페이지 응답(response) <-> 서버

	* Ajax (Asynchronous JavaScript and XML)
		=> 비동기 방식의 javascript, xml을 Ajax라고 한다.	
	- 조금 더 빠른 페이지 구성을 하기위해 구현된 기술
	- 페이지 전체를 로드하지 않고, 페이지 일부분만 로드해서 처리가능
	- 백그라운드 영역에서 서버와 통신 => 페이지 일부분에 표시 가능
	- XML, HTML, 텍스트 파일, JSON 데이터를 처리 가능
	
	* 장점 
	- 전체 페이지 로드없이 일부분만 로드 가능
	- 페이지 로드 완료 시에도 서버로 데이터 전송 가능 / 서버로부터 데이터 받기 가능
	- 페이지가 깔끔해진다
	
	* 단점
	- 결국 Ajax동작도 페이지 이동을 하는 형태 -> 많으면 처리가 느려짐
	- 클라이언트가 서버에 데이터를 요청하는 '클라이언트 풀링'방식 사용
	  => '서버 푸쉬'방식의 실시간 데이터 처리는 불가능
	- 바이너리 데이터를 전달 불가
	- Ajax 스크립트가 포함되어 있지 않는 서버로 요청을 보낼 수 없음
	- 클라이언트 PC로 요청을 보낼 수 없음
	
	'클라이언트 풀링' : 사용자가 원하는 정보를 서버에 요청해서 해당 정보를 받는 방식
	'서버 푸쉬' : 사용자가 원하지 않아도 서버가 자동으로 특정 정보를 제공하는 방식
	
	Ajax 프레임워크 -> JQuery 프레임워크를 사용해서 주로 구현
	
	XMLHttpRequest 객체
	 - 비동기 방식으로 데이터 전송, 수신하는 객체
	 - Ajax 방식의 데이터 처리를 하는 핵심 객체
	 - 거의 대부분의 브라우저들이 지원하는 객체(chrome, safari, opera, IE ...)
	